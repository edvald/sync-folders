#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const syncFolders = require("../index");

const src1 = path.resolve(__dirname, "..", "test", "src1");
const src2 = path.resolve(__dirname, "..", "test", "src2");
const target = path.resolve(__dirname, "..", "test", "output");

const needsHelp =
  process.argv.indexOf("--help") !== -1 ||
  process.argv.indexOf("-h") !== -1 ||
  process.argv.length === 2;

if (needsHelp) {
  console.log(
`sync-folders

A CLI tool around the sync-folders module for quickly linking or copying
directories into a target directory. This may be useful for local development
workarounds such as copying a source directory into another repo for local
testing.

Supported flags:


--watch,    Watch the source folders for changes to copy to the target.
-w          Default: false.

--ignore,   Anymatch compatible ignore string. CLI only takes string forms
-i          (separated by commas).
            Default: none.
            Example (to ignore all node_modules):
                --ignore "**/node_modules,**/node_modules/**"

--type,     Strategy for syncing the folders. By default, this tool will prefer
-t          using the "hardlink" strategy, where each file is hardlinked
            (referencing the same inode) and folders are mirrored. Use the
            "copy" strategy for a duplicate file. The hardlink strategy is
            preferred for performance and saving disk space.
            Default: "hardlink".

--verbose,  Logs out information on initial sync and any updates in watch mode.
-v          Default: false.

--quiet,    Suppresses any logging from warnings and errors.
-q          Default: false.
`
);

process.exit(0);
}


function parseFlag(flag) {
  switch (flag){
    case "--watch":
    case "-w":
      return { watch: true };
    case "--type":
    case "-t":
      return { nextArg: "type" };
    case "--ignore":
    case "-i":
      return { nextArg: "ignore" };
    case "--verbose":
    case "-v":
      return { verbose: true };
    case "--quiet":
    case "-q":
      return { quiet: true };
    default:
      console.log(`Unknown flag ${flag}`);
      process.exit(1);
  }
}

function parseIgnored(source) {
  return source.split(",");
}

const args = process.argv.slice(2).reduce((accum, arg) => {
  if (accum.nextArg === "type") {
    if (arg !== "hardlink" && arg !== "copy") {
      console.log(
        `Type flag must be one of "hardlink" or "copy". Instead, it was ${arg}`
      );
      process.exit(1);
    }

    return Object.assign({}, accum, { nextArg: null, type: arg });
  }

  if (accum.nextArg === "ignore") {
    return Object.assign({}, accum, {
      nextArg: null,
      ignore: parseIgnored(arg)
    });
  }

  if (arg.startsWith("-")) {
    return Object.assign({}, accum, parseFlag(arg));
  }

  return Object.assign({}, accum, {
    dirs: [arg, ...accum.dirs]
  });
}, { dirs: [] });

const [relativeTargetDir, ...relativeSourcePaths] = args.dirs;

const targetDir = path.resolve(process.cwd(), relativeTargetDir);
const sourcePaths = relativeSourcePaths.map(relativePath => {
  const absolutePath = path.resolve(process.cwd(), relativePath);

  if (!fs.existsSync(absolutePath)) {
    console.log(
      `Could not resolve ${relativePath}, expanded to ${absolutePath}`
    );
    process.exit(1);
  }

  return absolutePath;
});

console.log(args);


syncFolders(sourcePaths, targetDir, args);











// ./bin/syncFolders --help
// ./bin/syncFolders --watch ./a ./b ./c ./output
// ./bin/syncFolders --type copy --watch --ignored **/node_modules/**,**/node_modules ./a ./b ./c ./output



// TODO take CLI args in this form.
// const resolvedSourceDirs = sourceDirs.map((dir) => path.resolve(process.cwd(), sourceDirs));
//
// syncFolders([src1, src2], target, {
//   watch: true,
//   ignore: [
//     "**/node_modules/**",
//     "**/node_modules",
//   ],
// });
